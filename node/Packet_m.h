//
// Generated file, do not edit! Created by nedtool 5.4 from node/Packet.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __PACKET_M_H
#define __PACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class Packet;
// cplusplus {{


// }}

/**
 * Class generated from <tt>node/Packet.msg:8</tt> by nedtool.
 * <pre>
 * packet Packet
 * {
 *     int srcAddr \@packetData;
 *     int destAddr \@packetData;
 *     int hopCount \@packetData;
 * 
 *     int packetType \@packetData;
 * 
 *     //Node View
 *     int nodeID \@packetData;
 *     int posX \@packetData;
 *     int posY \@packetData;
 *     //Send Transaction
 *     int transactionValue \@packetData;
 *     double time \@packetData;
 *     int userXID \@packetData;
 *     int senatorAddress \@packetData;
 *     int transactionSourceAddress \@packetData;
 *     double TimeOfCreateTransaction \@packetData;
 *     int transactionID \@packetData;
 *     int transactionNodeID[] \@packetData;
 *     int transactionIdMsg[] \@packetData;
 *     simtime_t transactionTime[] \@packetData;
 *     int transactionVal[] \@packetData;
 *     //Transaction
 *     int blockID \@packetData;
 *     int preHash \@packetData;
 *     //PoMF
 *     double MF \@packetData;
 *     double candidateTime \@packetData;
 *     int neighbours[] \@packetData;
 *     bool vote[] \@packetData;
 * 
 * 
 * 
 * }
 * </pre>
 */
class Packet : public ::omnetpp::cPacket
{
  protected:
    int srcAddr = 0;
    int destAddr = 0;
    int hopCount = 0;
    int packetType = 0;
    int nodeID = 0;
    int posX = 0;
    int posY = 0;
    int transactionValue = 0;
    double time = 0;
    int userXID = 0;
    int senatorAddress = 0;
    int transactionSourceAddress = 0;
    double TimeOfCreateTransaction = 0;
    int transactionID = 0;
    int *transactionNodeID = nullptr;
    size_t transactionNodeID_arraysize = 0;
    int *transactionIdMsg = nullptr;
    size_t transactionIdMsg_arraysize = 0;
    omnetpp::simtime_t *transactionTime = nullptr;
    size_t transactionTime_arraysize = 0;
    int *transactionVal = nullptr;
    size_t transactionVal_arraysize = 0;
    int blockID = 0;
    int preHash = 0;
    double MF = 0;
    double candidateTime = 0;
    int *neighbours = nullptr;
    size_t neighbours_arraysize = 0;
    bool *vote = nullptr;
    size_t vote_arraysize = 0;

  private:
    void copy(const Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Packet&);

  public:
    Packet(const char *name=nullptr, short kind=0);
    Packet(const Packet& other);
    virtual ~Packet();
    Packet& operator=(const Packet& other);
    virtual Packet *dup() const override {return new Packet(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSrcAddr() const;
    virtual void setSrcAddr(int srcAddr);
    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getPacketType() const;
    virtual void setPacketType(int packetType);
    virtual int getNodeID() const;
    virtual void setNodeID(int nodeID);
    virtual int getPosX() const;
    virtual void setPosX(int posX);
    virtual int getPosY() const;
    virtual void setPosY(int posY);
    virtual int getTransactionValue() const;
    virtual void setTransactionValue(int transactionValue);
    virtual double getTime() const;
    virtual void setTime(double time);
    virtual int getUserXID() const;
    virtual void setUserXID(int userXID);
    virtual int getSenatorAddress() const;
    virtual void setSenatorAddress(int senatorAddress);
    virtual int getTransactionSourceAddress() const;
    virtual void setTransactionSourceAddress(int transactionSourceAddress);
    virtual double getTimeOfCreateTransaction() const;
    virtual void setTimeOfCreateTransaction(double TimeOfCreateTransaction);
    virtual int getTransactionID() const;
    virtual void setTransactionID(int transactionID);
    virtual void setTransactionNodeIDArraySize(size_t size);
    virtual size_t getTransactionNodeIDArraySize() const;
    virtual int getTransactionNodeID(size_t k) const;
    virtual void setTransactionNodeID(size_t k, int transactionNodeID);
    virtual void insertTransactionNodeID(int transactionNodeID);
    virtual void insertTransactionNodeID(size_t k, int transactionNodeID);
    virtual void eraseTransactionNodeID(size_t k);
    virtual void setTransactionIdMsgArraySize(size_t size);
    virtual size_t getTransactionIdMsgArraySize() const;
    virtual int getTransactionIdMsg(size_t k) const;
    virtual void setTransactionIdMsg(size_t k, int transactionIdMsg);
    virtual void insertTransactionIdMsg(int transactionIdMsg);
    virtual void insertTransactionIdMsg(size_t k, int transactionIdMsg);
    virtual void eraseTransactionIdMsg(size_t k);
    virtual void setTransactionTimeArraySize(size_t size);
    virtual size_t getTransactionTimeArraySize() const;
    virtual omnetpp::simtime_t getTransactionTime(size_t k) const;
    virtual void setTransactionTime(size_t k, omnetpp::simtime_t transactionTime);
    virtual void insertTransactionTime(omnetpp::simtime_t transactionTime);
    virtual void insertTransactionTime(size_t k, omnetpp::simtime_t transactionTime);
    virtual void eraseTransactionTime(size_t k);
    virtual void setTransactionValArraySize(size_t size);
    virtual size_t getTransactionValArraySize() const;
    virtual int getTransactionVal(size_t k) const;
    virtual void setTransactionVal(size_t k, int transactionVal);
    virtual void insertTransactionVal(int transactionVal);
    virtual void insertTransactionVal(size_t k, int transactionVal);
    virtual void eraseTransactionVal(size_t k);
    virtual int getBlockID() const;
    virtual void setBlockID(int blockID);
    virtual int getPreHash() const;
    virtual void setPreHash(int preHash);
    virtual double getMF() const;
    virtual void setMF(double MF);
    virtual double getCandidateTime() const;
    virtual void setCandidateTime(double candidateTime);
    virtual void setNeighboursArraySize(size_t size);
    virtual size_t getNeighboursArraySize() const;
    virtual int getNeighbours(size_t k) const;
    virtual void setNeighbours(size_t k, int neighbours);
    virtual void insertNeighbours(int neighbours);
    virtual void insertNeighbours(size_t k, int neighbours);
    virtual void eraseNeighbours(size_t k);
    virtual void setVoteArraySize(size_t size);
    virtual size_t getVoteArraySize() const;
    virtual bool getVote(size_t k) const;
    virtual void setVote(size_t k, bool vote);
    virtual void insertVote(bool vote);
    virtual void insertVote(size_t k, bool vote);
    virtual void eraseVote(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Packet& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Packet& obj) {obj.parsimUnpack(b);}

#endif // ifndef __PACKET_M_H

